<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAALADAACwAwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/rPQAP7H1AD+y9QA/q/QBP6r0AT+r9AE/q/QBP6v0AT+r
        9AE/qvQBP6r0AUCt9QEzOsQBJirYASY03wEmMt4BJjLeASYy3gEmMt4BJjLeASYy3gEmMt4AJjLeACYy
        3gAmMt4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP6v0AD+t9AA/rvQAP6n0Az+l9AA/pvQAP6b0AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACYy3gAmMt4AJjLeACYy
        3gImMt4BJjLeACYy3gAmM94AAAAAAAAAAAAAAAAAAAAAAAAAAAA/qfQAP6j0AD+q9AE/u/QAP7n0Bj+s
        9Aw/pvQLP6f0DD+n9Aw/p/QMP6f0DD+n9AxAqvUMMjvFDCYq2AomNN8KJjLdCiYy3gomMt4KJjLeCiYy
        3gsmMt4IIDHdACYy3gEmMt4AJjLeACYy3gAAAAAAAAAAAAAAAAAAAAAAAAAAAD+r9AA/p/QBP6j0AD+q
        9HI/qPTlP6n05z+q9Oc/qvTnP6r05z+q9Oc/qvTnP6n05z+s9OczOcPnJirY5SY03+UmMt7lJjLe5SYy
        3uUmMt7lJjLe5CYy3ugmMt6sJzPfEScz3wAmM98BMTvoAAAAAAAAAAAAAAAAAAAAAAAAAAAAP6r0Az+q
        9AA/q/Q8P6j0/z+x9P4/vvT/P7/0/z+/9P8/v/T/P7/0/z+98/8/vvT/QMP1/zM9wv8mKdn/JjTf/yYy
        3v8mMt7/JjLe/yYy3v8mMt7/JjLe+yUx3f8lMd2SJjLeACYy3gMjLtoAAAAAAAAAAAAAAAAAAAAAAAAA
        AAA/qfQEP6f0AD+o9GU/rPT/P8P0+T/D9P4/w/T+P8P0/j/D9P4/wvP+P8n3/kDF8/0/wvL9M0DD/SYp
        2P4mNN/9JjLe/iYy3v4mMt7+JjLe/iYy3v4mMt77Lj7r/y4+7L83TPwANkr6Aik24wAAAAAAAAAAAAAA
        AAAAAAAAAAAAAD+p9AQ/pPQAP6b0Zj+w9P8/xPT7P8H0/z/C9P8/wvT/P8Dz/z/J9/89oOX+MEHM/ipE
        3/4oN9r+JjDd/yYy3v8mMt7/JjLe/yYy3v8mMt7/JjLe/ycz3/wzRfP/NEb2wTdM/AA1SvkCMkLxAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAP6n0BD+l9AA/pvRmP7D0/z/E9Ps/wvT/P8L0/z/C9P8/w/T/P8Hz/jI1
        wP4lI9j/JTDf/yYx3/8mMt7/JjLe/yYy3v8mMt7/JjLe/yYy3v8mMt7/JzPf/DJD8v8zRfTDNUn4ADNG
        9QIyQvEAAAAAAAAAAAAAAAAAAAAAAAAAAAA/qfQEP6X0AD+m9Gc/sPT/P8T0+z/C9P8/wvT/P8H0/z/G
        9v8+sez+LiO+/iY24f8nNt7/JjLd/yYy3v8mMt7/JjLe/yk03P8pNNz/KTTc/yYy3f8mM9/8M0Tz/zRG
        9cI5T/8AN0z8AjFB7wAAAAAAAAAAAAAAAAAAAAAAAAAAAD+p9AQ/pfQAP6b0Zz+w9P8/xPT7P8L0/z/C
        9P8/wvT/P8H0/0DI9v81UMj+JhvP/yIq3v8kMd//JjPe/yYy3v8nM97/Gyrl/xcn5/8bK+X/JzTg/yYx
        3fwrOeb/KznmwDNG9QAyRPMCJzPfAAAAAAAAAAAAAAAAAAAAAAAAAAAAP6n0BD+l9AA/pvRnP7D0/z/E
        9Ps/wvT/P8L0/z/C9P8/wfT/P8X1/0C88f42cNj+O3Hm/jE+0/8lLdr/JjPf/yAu4v5pYLX8nYWW/GVW
        rv4iJ9f/JjTg/CUx3P8lMd3AJDDbACQw2wImMd0AAAAAAAAAAAAAAAAAAAAAAAAAAAA/qfQEP6X0AD+m
        9GU/sPT/P8T09z/C9Pw/wvT/P8L0/z/C9P89wPP/PcP1/DvK9/ta3Pr7QUbB/ikr1P8eL+X/e2yr/P7H
        W/73wmD/+8Zd/3dWlf4hJtf8Kzfd/yk03MApNd0AKTXdAik03AAAAAAAAAAAAAAAAAAAAAAAAAAAAD+p
        9AQ/pfQAP6b0Zz+w9P8/xPT7P8L0/z/C9P8/wvT/P8L0/0bG9f9Kx/X/R8T1/1vR+f8xPMr/GCDf/xEl
        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
        T6WQAIALpAIv/5CAX//0Mv///oL////n//8=
</value>
  </data>
</root>